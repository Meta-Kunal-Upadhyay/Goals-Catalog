1. Shopper's Information with Orders in Last 30 Days


select 
	u.user_id, 
	u.username, 
	u.email, 
	COUNT(o.order_id) AS orderCount 
from 
	users u
LEFT JOIN 
	orders o on u.user_id = o.user_id  
	AND o.order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY)
Where 
	user_role = 'Shopper'
GROUP BY  
	u.user_id, u.username, u.email
ORDER BY 
	orders_in_last_30_days DESC;


-- 2. Top 10 Shoppers by Revenue in Last 30 Days
SELECT
    u.user_id,
    u.username,
    u.email,
    ROUND(SUM(o.total_amount), 2) AS total_revenue
FROM
    Users u
JOIN
    Orders o ON u.user_id = o.user_id
WHERE
    o.order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY)
    AND u.user_role = 'Shopper'
GROUP BY
    u.user_id, u.username, u.email
ORDER BY
    total_revenue DESC
LIMIT 10;

-- 3. Top 20 Most Ordered Products in Last 60 Days
SELECT
    p.product_id,
    p.product_name,
    SUM(oi.quantity) AS total_quantity_ordered
FROM
    Products p
JOIN
    Order_Items oi ON p.product_id = oi.product_id
JOIN
    Orders o ON oi.order_id = o.order_id
WHERE
    o.order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 60 DAY)
GROUP BY
    p.product_id, p.product_name
ORDER BY
    total_quantity_ordered DESC
LIMIT 20;

-- 4. Monthly Sales Revenue for Last 6 Months
SELECT
    DATE_FORMAT(order_date, '%Y-%m') AS sales_month,
    ROUND(SUM(total_amount), 2) AS monthly_revenue
FROM
    Orders
WHERE
    order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)
GROUP BY
    sales_month
ORDER BY
    sales_month;

-- 5. Mark Products as Inactive (Not Ordered in Last 90 Days)
-- First, add an 'is_active' column to Products table if not exists
ALTER TABLE Products
ADD COLUMN is_active BOOLEAN DEFAULT TRUE;

-- Update products as inactive
UPDATE Products p
SET p.is_active = FALSE
WHERE p.product_id NOT IN (
    SELECT DISTINCT oi.product_id
    FROM Order_Items oi
    JOIN Orders o ON oi.order_id = o.order_id
    WHERE o.order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 90 DAY)
);

-- 6. Search Products by Category Keyword
SELECT
    p.product_id,
    p.product_name,
    c.category_name
FROM
    Products p
JOIN
    Product_Categories pc ON p.product_id = pc.product_id
JOIN
    Categories c ON pc.category_id = c.category_id
WHERE
    c.category_name LIKE '%{search_keyword}%';

-- 7. Top 10 Most Cancelled Items
SELECT
    p.product_id,
    p.product_name,
    COUNT(*) AS cancellation_count
FROM
    Products p
JOIN
    Order_Items oi ON p.product_id = oi.product_id
JOIN
    Orders o ON oi.order_id = o.order_id
WHERE
    o.order_status = 'Canceled'
GROUP BY
    p.product_id, p.product_name
ORDER BY
    cancellation_count DESC
LIMIT 10;


-- Create State Table
CREATE TABLE States (
    state_id INT AUTO_INCREMENT PRIMARY KEY,
    state_name VARCHAR(100) NOT NULL UNIQUE,
    state_code VARCHAR(10)
);

-- Create City/District Table
CREATE TABLE Cities (
    city_id INT AUTO_INCREMENT PRIMARY KEY,
    city_name VARCHAR(100) NOT NULL,
    state_id INT NOT NULL,
    FOREIGN KEY (state_id) REFERENCES States(state_id)
);

-- Create Zip Code Table
CREATE TABLE ZipCodes (
    zip_code VARCHAR(20) PRIMARY KEY,
    city_id INT NOT NULL,
    FOREIGN KEY (city_id) REFERENCES Cities(city_id)
);

-- Query to Return Zip Code, City, and State Information
SELECT
    z.zip_code,
    c.city_name,
    s.state_name
FROM
    ZipCodes z
JOIN
    Cities c ON z.city_id = c.city_id
JOIN
    States s ON c.state_id = s.state_id
ORDER BY
    s.state_name,
    c.city_name;




-- 1. Create View for Order Information (Last 60 Days)
CREATE OR REPLACE VIEW OrderInformationView AS
SELECT
    o.order_id,
    p.product_id,
    p.product_name,
    oi.price,
    u.username AS shopper_name,
    u.email AS shopper_email,
    o.order_date,
    o.order_status
FROM
    Orders o
JOIN
    Order_Items oi ON o.order_id = oi.order_id
JOIN
    Products p ON oi.product_id = p.product_id
JOIN
    Users u ON o.user_id = u.user_id
WHERE
    o.order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 60 DAY)
ORDER BY
    o.order_date DESC;

-- 2. Query to Display Products in 'Shipped' State
SELECT DISTINCT
    product_name,
    price
FROM
    OrderInformationView
WHERE
    order_status = 'Shipped';

-- 3. Top 5 Most Selling Products
SELECT
    product_name,
    COUNT(*) AS sales_count,
    SUM(price) AS total_revenue
FROM
    OrderInformationView
GROUP BY
    product_name
ORDER BY
    sales_count DESC
LIMIT 5;