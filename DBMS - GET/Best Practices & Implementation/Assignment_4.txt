Assignment 1


1.  Function to calculate the number of orders in a given month and year

DELIMITER $$  
CREATE FUNCTION GetOrderCount(month_input INT, year_input INT)  
RETURNS INT  
DETERMINISTIC  
BEGIN  
    DECLARE order_count INT;  

    SELECT COUNT(*) INTO order_count  
    FROM Orders  
    WHERE MONTH(order_date) = month_input AND YEAR(order_date) = year_input;  

    RETURN order_count;  
END $$  
DELIMITER ;  



2.  Function to return the month with the highest number of orders in a given year

DELIMITER $$  
CREATE FUNCTION GetMaxOrderMonth(year_input INT)  
RETURNS INT  
DETERMINISTIC  
BEGIN  
    DECLARE max_month INT;  

    SELECT MONTH(order_date) INTO max_month  
    FROM Orders  
    WHERE YEAR(order_date) = year_input  
    GROUP BY MONTH(order_date)  
    ORDER BY COUNT(*) DESC  
    LIMIT 1;  

    RETURN max_month;  
END $$  
DELIMITER ;  




Assignment 2

1. Stored Procedure to retrieve average sales of each product in a given month and year

DELIMITER $$ 
CREATE PROCEDURE GetAverageSalesPerProduct(IN month_input INT, IN year_input INT) 
BEGIN 
    SELECT oi.product_id, 
    AVG(oi.price * oi.quantity) AS avg_sales 
    FROM Order_Items oi 
    JOIN Orders o ON oi.order_id = o.order_id 
    WHERE MONTH(o.order_date) = month_input AND YEAR(o.order_date) = year_input 
    GROUP BY oi.product_id; 
END $$ 
DELIMITER ; 


2.  Stored Procedure to retrieve order details with validation on input dates


DELIMITER $$  
CREATE PROCEDURE GetOrderDetails(IN start_date DATE, IN end_date DATE)  
BEGIN  
    DECLARE validated_start DATE;  
    DECLARE validated_end DATE;  

    -- Validate if start date is greater than end date  
    IF start_date > end_date THEN  
        SET validated_start = DATE_FORMAT(start_date, '%Y-%m-01'); -- Set to first day of the month  
        SET validated_end = end_date;  
    ELSE  
        SET validated_start = start_date;  
        SET validated_end = end_date;  
    END IF;  

    -- Retrieve orders within the validated period  
    SELECT order_id, user_id, order_date, total_amount, order_status  
    FROM Orders  
    WHERE order_date BETWEEN validated_start AND validated_end;  
END $$  
DELIMITER ;  



Assignment 3

Indexing columns in Order, Product, and Category tables


-- Indexing frequently used columns for better performance  

CREATE INDEX idx_order_date ON Orders(order_date);  
CREATE INDEX idx_order_status ON Orders(order_status);  
CREATE INDEX idx_product_id ON Order_Items(product_id);  
CREATE INDEX idx_category_id ON Categories(category_id);  
CREATE INDEX idx_parent_category ON Categories(parent_category_id); 

