// This code is for establishing connection with MySQL
// database and retrieving data
// from db Java Database connectivity

/*
 *1. import --->java.sql
 *2. load and register the driver ---> com.jdbc.
 *3. create connection
 *4. create a statement
 *5. execute the query
 *6. process the results
 *7. close
 */ 

import java.sql.*;
import java.util.*;

// POJO Classes
class Order {
    int orderId;
    java.sql.Date orderDate;
    double orderTotal;

    public Order(int orderId, java.sql.Date orderDate, double orderTotal) {
        this.orderId = orderId;
        this.orderDate = orderDate;
        this.orderTotal = orderTotal;
    }

    @Override
    public String toString() {
        return "Order ID: " + orderId + ", Order Date: " + orderDate + ", Total: " + orderTotal;
    }
}




class DatabaseHelper {

    static String url = "jdbc:mysql://localhost:3306/storefront"; 
    static String username = "root"; 
    static String password = "root";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(url, username, password);
    }

    public static List<Order> getShippedOrdersByUser(int userId) {

        List<Order> orders = new ArrayList<>();
        
        String query = "SELECT order_id, order_date, total_amount FROM Orders " +
                       "WHERE user_id = ? AND order_status = 'Shipped' " +
                       "ORDER BY order_date ASC";

        try (Connection connect = getConnection();   //A connection (session) with a specific database. SQL statements are executed and results are returned within the context of a connection.
            PreparedStatement stmt = connect.prepareStatement(query)) {  // A SQL statement is precompiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times.
            stmt.setInt(1, userId);  // Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database.
            ResultSet rs = stmt.executeQuery();   // Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.
            while (rs.next()) {  // Moves the cursor forward one row from its current position. A ResultSet cursor is initially positioned before the first row; the first call to the method next makes the first row the current row; the second call makes the second row the current row, and so on.
                orders.add(new Order(rs.getInt("order_id"), rs.getDate("order_date"), rs.getDouble("total_amount")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return orders;
    }

    public static void insertProductImages(int productId, List<String> imageUrls) {
        String query = "INSERT INTO Product_Images (product_id, image_url) VALUES (?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            for (String url : imageUrls) {
                stmt.setInt(1, productId);
                stmt.setString(2, url);
                stmt.addBatch();
            }
            stmt.executeBatch();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static int deleteUnorderedProductsLastYear() {
        String query = "DELETE FROM Products WHERE product_id NOT IN " +
                       "(SELECT DISTINCT product_id FROM Order_Items WHERE order_id IN " +
                       "(SELECT order_id FROM Orders WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)))";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            return stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }
    
    public static Map<String, Integer> getTopParentCategories() {
        Map<String, Integer> result = new TreeMap<>();
        String query = "SELECT c1.category_name, COUNT(c2.category_id) AS child_count " +
                       "FROM Categories c1 LEFT JOIN Categories c2 ON c1.category_id = c2.parent_category_id " +
                       "WHERE c1.parent_category_id IS NULL " +
                       "GROUP BY c1.category_name ORDER BY c1.category_name ASC";

        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                result.put(rs.getString("category_name"), rs.getInt("child_count"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the user Id for which we want to see the shipped order :- ");
        int userId = sc.nextInt();

        // Retrieve shipped orders for the user
        List<Order> shippedOrders = getShippedOrdersByUser(userId);

        // Print the results
        if (shippedOrders.isEmpty()) {
            System.out.println("No shipped orders found for User ID: " + userId);
        } else {
            System.out.println("Shipped Orders for User ID " + userId + ":");
            for (Order order : shippedOrders) {
                System.out.println(order);
            }
        }


        Map<String, Integer> result = getTopParentCategories();

        for( Map.Entry<String, Integer> e : result.entrySet()){
            System.out.println("Key : " + e.getKey() + " Value : " + e.getValue());
        }
        sc.close();
        
    }
}